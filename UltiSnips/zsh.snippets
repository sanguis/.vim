extends sh

snippet bang_zsh "#!/bin/zsh"
#!/bin/zsh
endsnippet

snippet echd "debug statement" i
[[ \$DEBUG ]] && echo -e "\\033[34;1m[DEBUG]\\033[0m ${1:statement}"$0
endsnippet

snippet echi "info statement" i
echo -e "\\033[32;1m[INFO]\\033[0m ${1:statement}"$0
endsnippet

snippet eche "echo error" i
echo -e "\\033[31;1m[ERROR]\\033[0m ${1:statement}"
endsnippet

snippet debug  "[[ $DEBUG ]] && action" i
[[ \$DEBUG ]] && ${1:action}
endsnippet

snippet terinary "zsh terinary" i
[[ ${1:condtion} ]] && ${2:return} || ${3:else}$0
endsnippet

snippet  "# @des" "shdoc_ifunction" iA
# @description ${1}
#
#  @example
#     ${2:example_of_command}
#
#  @arg \$1 ${3:What is this argument?}
#
#  @exitcode 0 ${4:If successful.}
#  @exitcode 1 ${5:If an empty string passed.)}
endsnippet

snippet "(\[\[)? -a? (\[\])?" "true if file exists." ir
[[ ${2:!} -a ${1:file} ]]$0
endsnippet

snippet [[-b "true if file exists and is a block special file." i
[[ ${2:!} -b ${1:file} ]]$0
endsnippet

snippet [[-c "true if file exists and is a character special file." i
[[ ${2:!} -c ${1:file} ]]$0
endsnippet

snippet "([[ )?-d " "true if file exists and is a directory." i
[[ ${2:!} -d ${1:file} ]]$0
endsnippet

snippet [[-e "true if file exists." i
[[ ${2:!} -e ${1:file} ]]$0
endsnippet

snippet [[-f "true if file exists and is a regular file." i
[[ ${2:!} -f ${1:file} ]]$0
endsnippet

snippet [[-g "true if file exists and has its setgid bit set." i
[[ ${2:!} -g ${1:file} ]]$0
endsnippet

snippet [[-h "true if file exists and is a symbolic link." i
[[ ${2:!} -h ${1:file} ]]$0
endsnippet

snippet [[-k "true if file exists and has its sticky bit set." i
[[ ${2:!} -k ${1:file} ]]$0
endsnippet

snippet [[-n "true if length of string is non-zero." i
[[ ${2:!} -n ${1:string} ]]$0
endsnippet

snippet [[-o "true if option named option is on. option may be a single character, in which case it is a single letter option name. (See Specifying Options.)" i
[[ ${2:!} -o ${1:option} ]]$0
endsnippet

snippet [[-p "true if file exists and is a FIFO special file (named pipe)." i
[[ ${2:!} -p ${1:file} ]]$0
endsnippet

snippet [[-r "true if file exists and is readable by current process." i
[[ ${2:!} -r ${1:file} ]]$0
endsnippet

snippet [[-s "true if file exists and has size greater than zero." i
[[ ${2:!} -s ${1:file} ]]$0
endsnippet

snippet [[-t "true if file descriptor number fd is open and associated with a terminal device. (note: fd is not optional)" i
[[ ${2:!} -t ${1:fd} ]]$0
endsnippet

snippet [[-u "true if file exists and has its setuid bit set." i
[[ ${2:!} -u ${1:file} ]]$0
endsnippet

snippet [[-v "true if shell variable varname is set." i
[[ ${2:!} -v ${1:varname} ]]$0
endsnippet

snippet [[-w "true if file exists and is writable by current process." i
[[ ${2:!} -w ${1:file} ]]$0
endsnippet

snippet "\[\[\s?(! -|-?)(\]\])?" "-x. True if file exists and is executable by current process. If file exists and is a directory, then the current process has permission to search in the directory." r
[[ ${2:!} -x ${1:file} ]]$0
endsnippet

snippet [[-z "true if length of string is zero." i
[[ ${2:!} -z ${1:string} ]]$0
endsnippet

snippet [[-L "true if file exists and is a symbolic link." i
[[ ${2:!} -L ${1:file} ]]$0
endsnippet

snippet [[-O "true if file exists and is owned by the effective user ID of this process." i
[[ ${2:!} -O ${1:file} ]]$0
endsnippet

snippet [[-G "true if file exists and its group matches the effective group ID of this process." i
[[ ${2:!} -G ${1:file} ]]$0
endsnippet

snippet [[-S "true if file exists and is a socket." i
[[ ${2:!} -S ${1:file} ]]$0
endsnippet

snippet [[-N "true if file exists and its access time is not newer than its modification time." i
[[ ${2:!} -N ${1:file} ]]$0
endsnippet

#file1 -nt file2
#
#    true if file1 exists and is newer than file2.
#file1 -ot file2
#
#    true if file1 exists and is older than file2.
#file1 -ef file2
#
#    true if file1 and file2 exist and refer to the same file.
